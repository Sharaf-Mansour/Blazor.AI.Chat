@page "/"
<h3 class="text-center mt-3">Blazor AI Chat App</h3>

<div class="container h-100 p-3">
    <div class="card shadow-lg">
        <div id="scrollDiv" class="card-body chat-box" style="min-height: 520px; max-height:750px; overflow-y: auto;">
            @foreach (var message in Messages)
            {
                <div class="mb-2 d-flex @(message.User is User.You ? "justify-content-start" : "justify-content-end")">
                    <div class="p-2 border rounded @(message.User is User.You ? "bg-light"  :  message.User is User.Thoughts ? "bg-warning" :"bg-dark text-white")" style="max-width: 70%;">
                        <strong>@message.User:</strong>
                        <div style="white-space: pre-wrap;word-wrap: break-word;">
                            @message.Text
                        </div>
                        <div class="@(message.User is User.You ? "text-muted" : message.User is User.Thoughts ? "text-dark" : "text-light")" style="font-size: 0.8rem;">@message.Timestamp.ToString("HH:mm")</div>
                    </div>
                </div>
            }
        </div>
        <div class="card-footer p-2">
            <EditForm Model="this" Enhance class="input-group">
                <input type="text" class="form-control" placeholder="Type a message..." @bind="NewMessage" />
                <button type="submit" class="btn btn-primary" @onclick="SendMessage">Send</button>
            </EditForm>
        </div>
    </div>
</div>

@code {
    string NewMessage { get; set; } = "";
    List<Message> Messages { get; set; } = new();
    bool IsAiThinking { get; set; } = false;
    IEnumerable<SpeechSynthesisVoice> Voices { get; set; } = [];
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) this.Voices = await this.SpeechSynthesis.GetVoicesAsync();
    }
    private async void SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(NewMessage))
        {
            var tempMessage = NewMessage; 
            NewMessage = "";
            Messages.Add(new Message { User = User.You, Text = tempMessage.Trim(), Timestamp = DateTime.Now });
            IsAiThinking = true;
            var item = new Message { User = User.Thoughts, Text = "Thinking...", Timestamp = DateTime.Now };
            Messages.Add(item);
            this.StateHasChanged();
            var response = await AiEngine.GetResponseAsync(tempMessage);
            var pattern = @"<think>(.*?)\n(.*?)</think>";
            var regex = new Regex(pattern, RegexOptions.Singleline);
            var thoughts = "";
            var result = regex.Replace(response ?? "", match => {

                var answer = match.Groups[1].Value.Trim();
                thoughts  = match.Groups[2].Value.Trim();
                return answer;
            });
            var finalUtterance = new SpeechSynthesisUtterance
                {
                    Text = result,
                    Voice = this.Voices.FirstOrDefault(v => v.Name.Contains("Aria")),
                    Volume = 1,
                    Rate = 1.2,
                };

            await this.SpeechSynthesis.SpeakAsync(finalUtterance);
            Messages[^1] = new Message { User = User.Thoughts, Text = thoughts.Trim(), Timestamp = DateTime.Now };
            Messages.Add(new Message { User = User.Bot, Text = result.Trim(), Timestamp = DateTime.Now });
            IsAiThinking = false;
            this.StateHasChanged();
            await JS.InvokeVoidAsync("scrollToEnd", "scrollDiv");
        }
    }
    private class Message
    {
        public User User { get; set; } = User.You;
        public string? Text { get; set; } = "";
        public DateTime Timestamp { get; set; }
    }
    enum User
    {
        You,
        Thoughts,
        Bot
    }
}
